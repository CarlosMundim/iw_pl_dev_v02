version: '3.8'

services:
  # =============================================================================
  # DATABASE SERVICES
  # =============================================================================
  postgres:
    image: postgres:15-alpine
    container_name: iworkz-staging-postgres
    environment:
      POSTGRES_DB: iworkz_staging
      POSTGRES_USER: iworkz_staging
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_MULTIPLE_DATABASES: "iworkz_staging,iworkz_analytics,iworkz_compliance"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../../2_SERVICES/db-postgres/init:/docker-entrypoint-initdb.d
    ports:
      - "5433:5432"
    networks:
      - iworkz-staging
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U iworkz_staging -d iworkz_staging"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: iworkz-staging-redis
    volumes:
      - redis_data:/data
      - ../../2_SERVICES/redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    ports:
      - "6380:6379"
    networks:
      - iworkz-staging
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
    restart: unless-stopped

  # =============================================================================
  # CORE API SERVICES
  # =============================================================================
  backend-api:
    build:
      context: ../../2_SERVICES/backend-api
      dockerfile: Dockerfile
      target: production
    container_name: iworkz-staging-backend-api
    environment:
      NODE_ENV: staging
      PORT: 3000
      DATABASE_URL: postgresql://iworkz_staging:${POSTGRES_PASSWORD}@postgres:5432/iworkz_staging
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET}
      API_KEY: ${API_KEY}
      CORS_ORIGINS: "https://staging.iworkz.com,https://staging-app.iworkz.com"
      LOG_LEVEL: info
      RATE_LIMIT_WINDOW: 900000
      RATE_LIMIT_MAX: 1000
      SENTRY_DSN: ${SENTRY_DSN}
      NEW_RELIC_LICENSE_KEY: ${NEW_RELIC_LICENSE_KEY}
    volumes:
      - upload_data:/app/uploads
    ports:
      - "3001:3000"
    networks:
      - iworkz-staging
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
      restart_policy:
        condition: unless-stopped
        delay: 30s
        max_attempts: 3
    restart: unless-stopped

  ai-agent:
    build:
      context: ../../2_SERVICES/ai-agent
      dockerfile: Dockerfile
      target: production
    container_name: iworkz-staging-ai-agent
    environment:
      ENVIRONMENT: staging
      DATABASE_URL: postgresql://iworkz_staging:${POSTGRES_PASSWORD}@postgres:5432/iworkz_staging
      REDIS_URL: redis://redis:6379
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      BACKEND_API_URL: http://backend-api:3000
      LOG_LEVEL: info
      SENTRY_DSN: ${SENTRY_DSN}
      MODEL_CACHE_TTL: 3600
      MAX_CONCURRENT_REQUESTS: 10
    ports:
      - "8001:8000"
    networks:
      - iworkz-staging
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend-api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
      restart_policy:
        condition: unless-stopped
        delay: 30s
        max_attempts: 3
    restart: unless-stopped

  # =============================================================================
  # MICROSERVICES
  # =============================================================================
  matching-engine:
    build:
      context: ../../2_SERVICES/matching-engine
      dockerfile: Dockerfile
    container_name: iworkz-staging-matching-engine
    environment:
      ENVIRONMENT: staging
      DATABASE_URL: postgresql://iworkz_staging:${POSTGRES_PASSWORD}@postgres:5432/iworkz_staging
      REDIS_URL: redis://redis:6379
      AI_AGENT_URL: http://ai-agent:8000
      LOG_LEVEL: info
      MATCHING_ALGORITHM_VERSION: v2.1
      CACHE_TTL: 1800
    ports:
      - "8002:8000"
    networks:
      - iworkz-staging
    depends_on:
      ai-agent:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
    restart: unless-stopped

  compliance-engine:
    build:
      context: ../../2_SERVICES/compliance-engine
      dockerfile: Dockerfile
    container_name: iworkz-staging-compliance-engine
    environment:
      ENVIRONMENT: staging
      DATABASE_URL: postgresql://iworkz_staging:${POSTGRES_PASSWORD}@postgres:5432/iworkz_compliance
      REDIS_URL: redis://redis:6379
      AI_AGENT_URL: http://ai-agent:8000
      LOG_LEVEL: info
      COMPLIANCE_VERSION: v1.5
      AUDIT_RETENTION_DAYS: 2555
    ports:
      - "8003:8000"
    networks:
      - iworkz-staging
    depends_on:
      ai-agent:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
    restart: unless-stopped

  analytics-service:
    build:
      context: ../../2_SERVICES/analytics-service
      dockerfile: Dockerfile
    container_name: iworkz-staging-analytics
    environment:
      ENVIRONMENT: staging
      DATABASE_URL: postgresql://iworkz_staging:${POSTGRES_PASSWORD}@postgres:5432/iworkz_analytics
      REDIS_URL: redis://redis:6379
      BACKEND_API_URL: http://backend-api:3000
      LOG_LEVEL: info
      ANALYTICS_BATCH_SIZE: 1000
      REPORTING_SCHEDULE: "0 6 * * *"
    ports:
      - "8004:8000"
    networks:
      - iworkz-staging
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
    restart: unless-stopped

  notification-service:
    build:
      context: ../../2_SERVICES/notification-service
      dockerfile: Dockerfile
    container_name: iworkz-staging-notifications
    environment:
      ENVIRONMENT: staging
      DATABASE_URL: postgresql://iworkz_staging:${POSTGRES_PASSWORD}@postgres:5432/iworkz_staging
      REDIS_URL: redis://redis:6379
      BACKEND_API_URL: http://backend-api:3000
      SENDGRID_API_KEY: ${SENDGRID_API_KEY}
      TWILIO_ACCOUNT_SID: ${TWILIO_ACCOUNT_SID}
      TWILIO_AUTH_TOKEN: ${TWILIO_AUTH_TOKEN}
      PUSH_NOTIFICATION_KEY: ${PUSH_NOTIFICATION_KEY}
      LOG_LEVEL: info
      EMAIL_RATE_LIMIT: 100
      SMS_RATE_LIMIT: 50
    ports:
      - "8005:8000"
    networks:
      - iworkz-staging
    depends_on:
      backend-api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
    restart: unless-stopped

  # =============================================================================
  # FRONTEND SERVICES
  # =============================================================================
  web-frontend:
    build:
      context: ../../2_SERVICES/web-frontend
      dockerfile: Dockerfile
      target: production
      args:
        NEXT_PUBLIC_API_URL: https://staging-api.iworkz.com
        NEXT_PUBLIC_APP_ENV: staging
        NEXT_PUBLIC_SENTRY_DSN: ${SENTRY_DSN}
        NEXT_PUBLIC_GOOGLE_ANALYTICS_ID: ${GOOGLE_ANALYTICS_ID}
    container_name: iworkz-staging-frontend
    environment:
      NODE_ENV: production
      PORT: 3000
      API_URL: http://backend-api:3000
      NEXTAUTH_URL: https://staging.iworkz.com
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
    ports:
      - "3002:3000"
    networks:
      - iworkz-staging
    depends_on:
      backend-api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
    restart: unless-stopped

  # =============================================================================
  # SEARCH AND INTEGRATION
  # =============================================================================
  search:
    image: elasticsearch:8.11.0
    container_name: iworkz-staging-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - cluster.name=iworkz-staging
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9201:9200"
    networks:
      - iworkz-staging
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
    restart: unless-stopped

  # =============================================================================
  # MONITORING STACK
  # =============================================================================
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: iworkz-staging-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ../../2_SERVICES/monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9091:9090"
    networks:
      - iworkz-staging
    restart: unless-stopped

  grafana:
    image: grafana/grafana:10.1.0
    container_name: iworkz-staging-grafana
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: false
      GF_SERVER_DOMAIN: staging-monitoring.iworkz.com
      GF_SERVER_ROOT_URL: https://staging-monitoring.iworkz.com/
      GF_ANALYTICS_REPORTING_ENABLED: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ../../2_SERVICES/monitoring/grafana/provisioning:/etc/grafana/provisioning
    ports:
      - "3003:3000"
    networks:
      - iworkz-staging
    depends_on:
      - prometheus
    restart: unless-stopped

  # =============================================================================
  # REVERSE PROXY & SSL
  # =============================================================================
  nginx:
    image: nginx:1.25-alpine
    container_name: iworkz-staging-nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./ssl:/etc/nginx/ssl
      - upload_data:/var/www/uploads
    ports:
      - "80:80"
      - "443:443"
    networks:
      - iworkz-staging
    depends_on:
      - web-frontend
      - backend-api
    restart: unless-stopped

# =============================================================================
# NETWORKS AND VOLUMES
# =============================================================================
networks:
  iworkz-staging:
    name: iworkz-staging-network
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/iworkz/staging/postgres
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/iworkz/staging/redis
  elasticsearch_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/iworkz/staging/elasticsearch
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/iworkz/staging/prometheus
  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/iworkz/staging/grafana
  upload_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/iworkz/staging/uploads