version: '3.8'

# iWORKZ Platform - Production Docker Compose Configuration
# This file orchestrates all microservices for production deployment

services:
  # ============================================
  # REVERSE PROXY & LOAD BALANCER
  # ============================================
  nginx:
    image: nginx:alpine
    container_name: iworkz-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - /var/log/nginx:/var/log/nginx
    depends_on:
      - web-frontend
      - backend-api
    networks:
      - iworkz-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ============================================
  # FRONTEND SERVICES
  # ============================================
  web-frontend:
    image: iworkz/web-frontend:${VERSION:-latest}
    container_name: iworkz-web-frontend
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_BASE_URL=https://api.iworkz.jp/api/v1
    volumes:
      - web-frontend-data:/app/.next
    networks:
      - iworkz-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  admin-dashboard:
    image: iworkz/admin-dashboard:${VERSION:-latest}
    container_name: iworkz-admin-dashboard
    environment:
      - NODE_ENV=production
    networks:
      - iworkz-network
    restart: unless-stopped

  # ============================================
  # BACKEND SERVICES
  # ============================================
  backend-api:
    image: iworkz/backend-api:${VERSION:-latest}
    container_name: iworkz-backend-api
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      - postgres
      - redis
    volumes:
      - backend-logs:/app/logs
    networks:
      - iworkz-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  ai-agent:
    image: iworkz/ai-agent:${VERSION:-latest}
    container_name: iworkz-ai-agent
    environment:
      - NODE_ENV=production
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
    depends_on:
      - postgres
      - redis
    volumes:
      - ai-models:/app/models
      - ai-logs:/app/logs
    networks:
      - iworkz-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G

  # ============================================
  # SPECIALIZED SERVICES
  # ============================================
  compliance-engine:
    image: iworkz/compliance-engine:${VERSION:-latest}
    container_name: iworkz-compliance-engine
    environment:
      - NODE_ENV=production
    depends_on:
      - postgres
    networks:
      - iworkz-network
    restart: unless-stopped

  credential-engine:
    image: iworkz/credential-engine:${VERSION:-latest}
    container_name: iworkz-credential-engine
    environment:
      - NODE_ENV=production
      - ETHEREUM_NETWORK=${ETHEREUM_NETWORK}
      - INFURA_PROJECT_ID=${INFURA_PROJECT_ID}
    depends_on:
      - postgres
    networks:
      - iworkz-network
    restart: unless-stopped

  matching-engine:
    image: iworkz/matching-engine:${VERSION:-latest}
    container_name: iworkz-matching-engine
    environment:
      - NODE_ENV=production
    depends_on:
      - ai-agent
      - postgres
    networks:
      - iworkz-network
    restart: unless-stopped

  notification-service:
    image: iworkz/notification-service:${VERSION:-latest}
    container_name: iworkz-notification-service
    environment:
      - NODE_ENV=production
      - SENDGRID_API_KEY=${SENDGRID_API_KEY}
      - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN}
    depends_on:
      - postgres
      - redis
      - rabbitmq
    networks:
      - iworkz-network
    restart: unless-stopped

  search:
    image: iworkz/search:${VERSION:-latest}
    container_name: iworkz-search
    environment:
      - NODE_ENV=production
      - ELASTICSEARCH_URL=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - iworkz-network
    restart: unless-stopped

  analytics-service:
    image: iworkz/analytics-service:${VERSION:-latest}
    container_name: iworkz-analytics-service
    environment:
      - NODE_ENV=production
    depends_on:
      - postgres
      - elasticsearch
    networks:
      - iworkz-network
    restart: unless-stopped

  # ============================================
  # DATABASE SERVICES
  # ============================================
  postgres:
    image: postgres:15-alpine
    container_name: iworkz-postgres
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d:ro
      - postgres-logs:/var/log/postgresql
    networks:
      - iworkz-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  redis:
    image: redis:7-alpine
    container_name: iworkz-redis
    command: redis-server --requirepass ${REDIS_PASSWORD}
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - iworkz-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.7.0
    container_name: iworkz-elasticsearch
    environment:
      - node.name=iworkz-es-node
      - cluster.name=iworkz-cluster
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - xpack.security.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - iworkz-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ============================================
  # MESSAGE QUEUE
  # ============================================
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: iworkz-rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - iworkz-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

# ============================================
# MONITORING STACK
# ============================================
  prometheus:
    image: prom/prometheus:latest
    container_name: iworkz-prometheus
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    networks:
      - iworkz-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: iworkz-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    networks:
      - iworkz-network
    restart: unless-stopped

  loki:
    image: grafana/loki:latest
    container_name: iworkz-loki
    volumes:
      - ./monitoring/loki/loki.yml:/etc/loki/local-config.yaml:ro
      - loki-data:/tmp/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - iworkz-network
    restart: unless-stopped

  promtail:
    image: grafana/promtail:latest
    container_name: iworkz-promtail
    volumes:
      - ./monitoring/promtail/promtail.yml:/etc/promtail/config.yml:ro
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    networks:
      - iworkz-network
    restart: unless-stopped

# ============================================
# NETWORKS
# ============================================
networks:
  iworkz-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ============================================
# VOLUMES
# ============================================
volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  elasticsearch-data:
    driver: local
  rabbitmq-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  loki-data:
    driver: local
  ai-models:
    driver: local
  web-frontend-data:
    driver: local
  backend-logs:
    driver: local
  ai-logs:
    driver: local
  postgres-logs:
    driver: local