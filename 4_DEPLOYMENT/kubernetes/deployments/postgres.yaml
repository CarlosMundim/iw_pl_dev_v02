# =============================================================================
# PostgreSQL Database Deployment
# =============================================================================

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: iworkz-platform
  labels:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: iworkz-platform
spec:
  serviceName: postgres-service
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: postgres
  template:
    metadata:
      labels:
        app.kubernetes.io/name: postgres
        app.kubernetes.io/component: database
    spec:
      serviceAccountName: iworkz-service-account
      containers:
        - name: postgres
          image: postgres:15-alpine
          ports:
            - name: postgres
              containerPort: 5432
          env:
            - name: POSTGRES_DB
              valueFrom:
                configMapKeyRef:
                  name: postgres-config
                  key: POSTGRES_DB
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: postgres-secrets
                  key: POSTGRES_USER
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-secrets
                  key: POSTGRES_PASSWORD
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
            - name: POSTGRES_INITDB_ARGS
              value: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
          resources:
            requests:
              memory: "1Gi"
              cpu: "500m"
            limits:
              memory: "2Gi"
              cpu: "1000m"
          volumeMounts:
            - name: postgres-storage
              mountPath: /var/lib/postgresql/data
            - name: postgres-init
              mountPath: /docker-entrypoint-initdb.d
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "$POSTGRES_USER" -d "$POSTGRES_DB" -h 127.0.0.1 -p 5432
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 6
            successThreshold: 1
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "$POSTGRES_USER" -d "$POSTGRES_DB" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 6
            successThreshold: 1
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 999
            capabilities:
              drop:
                - ALL
      volumes:
        - name: postgres-init
          configMap:
            name: postgres-init-scripts
            defaultMode: 0755
      securityContext:
        fsGroup: 999
  volumeClaimTemplates:
    - metadata:
        name: postgres-storage
        labels:
          app.kubernetes.io/name: postgres
          app.kubernetes.io/component: storage
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 50Gi
        storageClassName: gp3

---
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: iworkz-platform
  labels:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/component: database
spec:
  type: ClusterIP
  ports:
    - port: 5432
      targetPort: postgres
      protocol: TCP
      name: postgres
  selector:
    app.kubernetes.io/name: postgres

---
apiVersion: v1
kind: Secret
metadata:
  name: postgres-secrets
  namespace: iworkz-platform
  labels:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/component: secrets
type: Opaque
stringData:
  POSTGRES_USER: "iworkz_user"
  POSTGRES_PASSWORD: "iworkz_secure_password_2024"

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config
  namespace: iworkz-platform
  labels:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/component: config
data:
  POSTGRES_DB: "iworkz_platform"

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-init-scripts
  namespace: iworkz-platform
  labels:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/component: init-scripts
data:
  01_create_database.sql: |
    -- Create the main database (already created by POSTGRES_DB)
    -- Create additional databases if needed
    
    -- Create extensions
    CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
    CREATE EXTENSION IF NOT EXISTS "pgcrypto";
    CREATE EXTENSION IF NOT EXISTS "pg_trgm";
    
  02_create_tables.sql: |
    -- Users table
    CREATE TABLE IF NOT EXISTS users (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        email VARCHAR(255) UNIQUE NOT NULL,
        password_hash VARCHAR(255) NOT NULL,
        first_name VARCHAR(100),
        last_name VARCHAR(100),
        role VARCHAR(50) DEFAULT 'user',
        is_active BOOLEAN DEFAULT true,
        email_verified BOOLEAN DEFAULT false,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
    );

    -- User profiles table
    CREATE TABLE IF NOT EXISTS user_profiles (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        user_id UUID REFERENCES users(id) ON DELETE CASCADE,
        phone VARCHAR(20),
        address TEXT,
        city VARCHAR(100),
        state VARCHAR(100),
        country VARCHAR(100),
        postal_code VARCHAR(20),
        date_of_birth DATE,
        avatar_url VARCHAR(255),
        bio TEXT,
        skills TEXT[],
        experience_level VARCHAR(50),
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
    );

    -- Companies table
    CREATE TABLE IF NOT EXISTS companies (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        name VARCHAR(255) NOT NULL,
        description TEXT,
        industry VARCHAR(100),
        size VARCHAR(50),
        website VARCHAR(255),
        logo_url VARCHAR(255),
        headquarters_location VARCHAR(255),
        founded_year INTEGER,
        is_verified BOOLEAN DEFAULT false,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
    );

    -- Jobs table
    CREATE TABLE IF NOT EXISTS jobs (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        company_id UUID REFERENCES companies(id) ON DELETE CASCADE,
        title VARCHAR(255) NOT NULL,
        description TEXT NOT NULL,
        requirements TEXT,
        location VARCHAR(255),
        type VARCHAR(50) DEFAULT 'full-time',
        salary_min INTEGER,
        salary_max INTEGER,
        currency VARCHAR(3) DEFAULT 'USD',
        is_remote BOOLEAN DEFAULT false,
        status VARCHAR(50) DEFAULT 'active',
        posted_by UUID REFERENCES users(id),
        application_deadline DATE,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
    );

    -- Job applications table
    CREATE TABLE IF NOT EXISTS job_applications (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        job_id UUID REFERENCES jobs(id) ON DELETE CASCADE,
        user_id UUID REFERENCES users(id) ON DELETE CASCADE,
        status VARCHAR(50) DEFAULT 'pending',
        cover_letter TEXT,
        resume_url VARCHAR(255),
        applied_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        UNIQUE(job_id, user_id)
    );

    -- Skills table
    CREATE TABLE IF NOT EXISTS skills (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        name VARCHAR(100) UNIQUE NOT NULL,
        category VARCHAR(100),
        description TEXT,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
    );

    -- User skills junction table
    CREATE TABLE IF NOT EXISTS user_skills (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        user_id UUID REFERENCES users(id) ON DELETE CASCADE,
        skill_id UUID REFERENCES skills(id) ON DELETE CASCADE,
        proficiency_level VARCHAR(50),
        years_of_experience INTEGER,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        UNIQUE(user_id, skill_id)
    );

    -- Notifications table
    CREATE TABLE IF NOT EXISTS notifications (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        user_id UUID REFERENCES users(id) ON DELETE CASCADE,
        type VARCHAR(50) NOT NULL,
        title VARCHAR(255) NOT NULL,
        message TEXT NOT NULL,
        data JSONB,
        is_read BOOLEAN DEFAULT false,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
    );

    -- Audit log table
    CREATE TABLE IF NOT EXISTS audit_logs (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        user_id UUID REFERENCES users(id),
        action VARCHAR(100) NOT NULL,
        resource_type VARCHAR(100),
        resource_id UUID,
        details JSONB,
        ip_address INET,
        user_agent TEXT,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
    );

  03_create_indexes.sql: |
    -- Create indexes for better performance
    CREATE INDEX IF NOT EXISTS idx_users_email ON users(email);
    CREATE INDEX IF NOT EXISTS idx_users_role ON users(role);
    CREATE INDEX IF NOT EXISTS idx_users_active ON users(is_active);
    
    CREATE INDEX IF NOT EXISTS idx_user_profiles_user_id ON user_profiles(user_id);
    
    CREATE INDEX IF NOT EXISTS idx_companies_name ON companies(name);
    CREATE INDEX IF NOT EXISTS idx_companies_industry ON companies(industry);
    CREATE INDEX IF NOT EXISTS idx_companies_verified ON companies(is_verified);
    
    CREATE INDEX IF NOT EXISTS idx_jobs_company_id ON jobs(company_id);
    CREATE INDEX IF NOT EXISTS idx_jobs_status ON jobs(status);
    CREATE INDEX IF NOT EXISTS idx_jobs_type ON jobs(type);
    CREATE INDEX IF NOT EXISTS idx_jobs_location ON jobs(location);
    CREATE INDEX IF NOT EXISTS idx_jobs_remote ON jobs(is_remote);
    CREATE INDEX IF NOT EXISTS idx_jobs_created_at ON jobs(created_at);
    
    CREATE INDEX IF NOT EXISTS idx_job_applications_job_id ON job_applications(job_id);
    CREATE INDEX IF NOT EXISTS idx_job_applications_user_id ON job_applications(user_id);
    CREATE INDEX IF NOT EXISTS idx_job_applications_status ON job_applications(status);
    
    CREATE INDEX IF NOT EXISTS idx_skills_name ON skills(name);
    CREATE INDEX IF NOT EXISTS idx_skills_category ON skills(category);
    
    CREATE INDEX IF NOT EXISTS idx_user_skills_user_id ON user_skills(user_id);
    CREATE INDEX IF NOT EXISTS idx_user_skills_skill_id ON user_skills(skill_id);
    
    CREATE INDEX IF NOT EXISTS idx_notifications_user_id ON notifications(user_id);
    CREATE INDEX IF NOT EXISTS idx_notifications_read ON notifications(is_read);
    CREATE INDEX IF NOT EXISTS idx_notifications_created_at ON notifications(created_at);
    
    CREATE INDEX IF NOT EXISTS idx_audit_logs_user_id ON audit_logs(user_id);
    CREATE INDEX IF NOT EXISTS idx_audit_logs_action ON audit_logs(action);
    CREATE INDEX IF NOT EXISTS idx_audit_logs_created_at ON audit_logs(created_at);
    
    -- Full-text search indexes
    CREATE INDEX IF NOT EXISTS idx_jobs_search ON jobs USING gin(to_tsvector('english', title || ' ' || description));
    CREATE INDEX IF NOT EXISTS idx_companies_search ON companies USING gin(to_tsvector('english', name || ' ' || COALESCE(description, '')));

  04_create_functions.sql: |
    -- Function to update the updated_at timestamp
    CREATE OR REPLACE FUNCTION update_updated_at_column()
    RETURNS TRIGGER AS $$
    BEGIN
        NEW.updated_at = CURRENT_TIMESTAMP;
        RETURN NEW;
    END;
    $$ language 'plpgsql';

    -- Triggers for updating updated_at
    CREATE TRIGGER update_users_updated_at BEFORE UPDATE ON users FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
    CREATE TRIGGER update_user_profiles_updated_at BEFORE UPDATE ON user_profiles FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
    CREATE TRIGGER update_companies_updated_at BEFORE UPDATE ON companies FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
    CREATE TRIGGER update_jobs_updated_at BEFORE UPDATE ON jobs FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
    CREATE TRIGGER update_job_applications_updated_at BEFORE UPDATE ON job_applications FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

  05_seed_data.sql: |
    -- Insert sample skills
    INSERT INTO skills (name, category, description) VALUES
    ('JavaScript', 'Programming Languages', 'Dynamic programming language for web development'),
    ('Python', 'Programming Languages', 'Versatile programming language for web, data science, and automation'),
    ('React', 'Frontend Frameworks', 'JavaScript library for building user interfaces'),
    ('Node.js', 'Backend Technologies', 'JavaScript runtime for server-side development'),
    ('PostgreSQL', 'Databases', 'Advanced open source relational database'),
    ('AWS', 'Cloud Platforms', 'Amazon Web Services cloud computing platform'),
    ('Docker', 'DevOps Tools', 'Containerization platform for application deployment'),
    ('Kubernetes', 'DevOps Tools', 'Container orchestration platform'),
    ('Machine Learning', 'Data Science', 'Artificial intelligence and predictive modeling'),
    ('Project Management', 'Soft Skills', 'Planning, executing, and managing projects effectively')
    ON CONFLICT (name) DO NOTHING;

    -- Insert sample companies
    INSERT INTO companies (name, description, industry, size, website, headquarters_location, founded_year, is_verified) VALUES
    ('TechCorp Inc.', 'Leading technology company specializing in cloud solutions', 'Technology', '1000-5000', 'https://techcorp.com', 'San Francisco, CA', 2010, true),
    ('DataSolutions Ltd.', 'Data analytics and machine learning consultancy', 'Data & Analytics', '100-500', 'https://datasolutions.com', 'New York, NY', 2015, true),
    ('StartupX', 'Innovative fintech startup revolutionizing payments', 'Financial Technology', '10-50', 'https://startupx.com', 'Austin, TX', 2020, false)
    ON CONFLICT DO NOTHING;

---
# Postgres Exporter for Prometheus monitoring
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-exporter
  namespace: iworkz-platform
  labels:
    app.kubernetes.io/name: postgres-exporter
    app.kubernetes.io/component: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: postgres-exporter
  template:
    metadata:
      labels:
        app.kubernetes.io/name: postgres-exporter
        app.kubernetes.io/component: monitoring
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9187"
        prometheus.io/path: "/metrics"
    spec:
      containers:
        - name: postgres-exporter
          image: prometheuscommunity/postgres-exporter:v0.14.0
          ports:
            - name: metrics
              containerPort: 9187
          env:
            - name: DATA_SOURCE_NAME
              valueFrom:
                secretKeyRef:
                  name: postgres-exporter-secret
                  key: DATA_SOURCE_NAME
          resources:
            requests:
              memory: "64Mi"
              cpu: "50m"
            limits:
              memory: "128Mi"
              cpu: "100m"
          livenessProbe:
            httpGet:
              path: /metrics
              port: metrics
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /metrics
              port: metrics
            initialDelaySeconds: 5
            periodSeconds: 5

---
apiVersion: v1
kind: Secret
metadata:
  name: postgres-exporter-secret
  namespace: iworkz-platform
  labels:
    app.kubernetes.io/name: postgres-exporter
    app.kubernetes.io/component: secrets
type: Opaque
stringData:
  DATA_SOURCE_NAME: "postgresql://iworkz_user:iworkz_secure_password_2024@postgres-service:5432/iworkz_platform?sslmode=disable"

---
apiVersion: v1
kind: Service
metadata:
  name: postgres-exporter-service
  namespace: iworkz-platform
  labels:
    app.kubernetes.io/name: postgres-exporter
    app.kubernetes.io/component: monitoring
spec:
  type: ClusterIP
  ports:
    - port: 9187
      targetPort: metrics
      protocol: TCP
      name: metrics
  selector:
    app.kubernetes.io/name: postgres-exporter