# =============================================================================
# iWORKZ Platform Ingress Configuration
# =============================================================================

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: iworkz-ingress
  namespace: iworkz-platform
  labels:
    app.kubernetes.io/name: iworkz
    app.kubernetes.io/component: ingress
  annotations:
    # NGINX Ingress Controller annotations
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    
    # Rate limiting
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    
    # Security headers
    nginx.ingress.kubernetes.io/configuration-snippet: |
      add_header X-Frame-Options DENY always;
      add_header X-Content-Type-Options nosniff always;
      add_header X-XSS-Protection "1; mode=block" always;
      add_header Referrer-Policy "strict-origin-when-cross-origin" always;
      add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://www.google-analytics.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; font-src 'self' https://fonts.gstatic.com; img-src 'self' data: https:; connect-src 'self' https://api.iworkz.com; frame-ancestors 'none';" always;
    
    # CORS
    nginx.ingress.kubernetes.io/cors-allow-origin: "https://iworkz.com"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "Authorization, Content-Type, X-Requested-With"
    nginx.ingress.kubernetes.io/cors-allow-credentials: "true"
    
    # Client body size
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    
    # SSL certificate
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    
    # Monitoring
    nginx.ingress.kubernetes.io/enable-opentracing: "true"
    
spec:
  tls:
    - hosts:
        - iworkz.com
        - www.iworkz.com
        - api.iworkz.com
      secretName: iworkz-tls
  rules:
    # Main website
    - host: iworkz.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: web-frontend-service
                port:
                  number: 3000
    
    # WWW redirect (handled by frontend)
    - host: www.iworkz.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: web-frontend-service
                port:
                  number: 3000
    
    # API subdomain
    - host: api.iworkz.com
      http:
        paths:
          # Backend API routes
          - path: /
            pathType: Prefix
            backend:
              service:
                name: backend-api-service
                port:
                  number: 3000
          
          # AI Agent routes
          - path: /ai
            pathType: Prefix
            backend:
              service:
                name: ai-agent-service
                port:
                  number: 8000

---
# Separate ingress for staging environment
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: iworkz-staging-ingress
  namespace: iworkz-platform
  labels:
    app.kubernetes.io/name: iworkz
    app.kubernetes.io/component: ingress
    app.kubernetes.io/instance: staging
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/rate-limit: "200"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    cert-manager.io/cluster-issuer: "letsencrypt-staging"
    
    # Basic auth for staging (optional)
    # nginx.ingress.kubernetes.io/auth-type: basic
    # nginx.ingress.kubernetes.io/auth-secret: basic-auth-secret
    # nginx.ingress.kubernetes.io/auth-realm: 'Authentication Required - Staging'
    
spec:
  tls:
    - hosts:
        - staging.iworkz.com
        - staging-api.iworkz.com
      secretName: iworkz-staging-tls
  rules:
    # Staging website
    - host: staging.iworkz.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: web-frontend-service
                port:
                  number: 3000
    
    # Staging API
    - host: staging-api.iworkz.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: backend-api-service
                port:
                  number: 3000
          - path: /ai
            pathType: Prefix
            backend:
              service:
                name: ai-agent-service
                port:
                  number: 8000

---
# Monitoring ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: iworkz-monitoring-ingress
  namespace: iworkz-monitoring
  labels:
    app.kubernetes.io/name: monitoring
    app.kubernetes.io/component: ingress
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    
    # Basic authentication for monitoring
    nginx.ingress.kubernetes.io/auth-type: basic
    nginx.ingress.kubernetes.io/auth-secret: monitoring-basic-auth
    nginx.ingress.kubernetes.io/auth-realm: 'Authentication Required - Monitoring'
    
    # IP whitelist (optional)
    # nginx.ingress.kubernetes.io/whitelist-source-range: "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16"
    
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    
spec:
  tls:
    - hosts:
        - monitoring.iworkz.com
      secretName: monitoring-tls
  rules:
    - host: monitoring.iworkz.com
      http:
        paths:
          # Grafana
          - path: /
            pathType: Prefix
            backend:
              service:
                name: grafana-service
                port:
                  number: 3000
          
          # Prometheus (optional direct access)
          - path: /prometheus
            pathType: Prefix
            backend:
              service:
                name: prometheus-service
                port:
                  number: 9090

---
# NGINX Ingress Controller configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-configuration
  namespace: iworkz-ingress
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
data:
  # Global NGINX settings
  proxy-connect-timeout: "60"
  proxy-send-timeout: "60"
  proxy-read-timeout: "60"
  proxy-buffers-number: "8"
  proxy-buffer-size: "64k"
  
  # SSL settings
  ssl-protocols: "TLSv1.2 TLSv1.3"
  ssl-ciphers: "ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384"
  ssl-prefer-server-ciphers: "off"
  ssl-session-cache: "shared:SSL:10m"
  ssl-session-timeout: "10m"
  
  # Performance settings
  gzip-level: "6"
  gzip-types: "text/plain text/css text/xml text/javascript application/json application/javascript application/xml+rss application/atom+xml image/svg+xml"
  
  # Security settings
  hide-headers: "Server,X-Powered-By"
  server-tokens: "false"
  
  # Rate limiting
  limit-req-status-code: "429"
  limit-conn-status-code: "429"
  
  # Logging
  log-format-escape-json: "true"
  log-format-upstream: '{"time": "$time_iso8601", "remote_addr": "$proxy_protocol_addr", "x_forwarded_for": "$proxy_add_x_forwarded_for", "request_id": "$req_id", "remote_user": "$remote_user", "bytes_sent": $bytes_sent, "request_time": $request_time, "status": $status, "vhost": "$host", "request_proto": "$server_protocol", "path": "$uri", "request_query": "$args", "request_length": $request_length, "duration": $request_time,"method": "$request_method", "http_referrer": "$http_referer", "http_user_agent": "$http_user_agent", "upstream_addr": "$upstream_addr", "upstream_response_time": "$upstream_response_time", "upstream_connect_time": "$upstream_connect_time", "upstream_header_time": "$upstream_header_time"}'