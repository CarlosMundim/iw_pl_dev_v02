version: '3.8'

services:
  # Database Services
  postgres:
    image: postgres:15-alpine
    container_name: iworkz-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./2_SERVICES/db-postgres/init:/docker-entrypoint-initdb.d
    networks:
      - iworkz-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: iworkz-redis
    command: redis-server --requirepass ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - iworkz-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Core API Service
  backend-api:
    build: ./2_SERVICES/backend-api
    container_name: iworkz-api
    environment:
      - NODE_ENV=${NODE_ENV}
      - API_PORT=${API_PORT}
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - REDIS_URL=redis://redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - API_SECRET=${API_SECRET}
      - FRONTEND_URL=${FRONTEND_URL}
    ports:
      - "${API_PORT}:${API_PORT}"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./2_SERVICES/backend-api:/app
      - /app/node_modules
    networks:
      - iworkz-network
    restart: unless-stopped

  # Frontend Services
  web-frontend:
    build: ./2_SERVICES/web-frontend
    container_name: iworkz-web
    environment:
      - NODE_ENV=${NODE_ENV}
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
      - NEXT_PUBLIC_APP_NAME=${NEXT_PUBLIC_APP_NAME}
    ports:
      - "3000:3000"
    depends_on:
      - backend-api
    volumes:
      - ./2_SERVICES/web-frontend:/app
      - /app/node_modules
      - /app/.next
    networks:
      - iworkz-network
    restart: unless-stopped

  # AI Services
  ai-agent:
    build: ./2_SERVICES/ai-agent
    container_name: iworkz-ai
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY}
      - AI_SERVICE_PORT=${AI_SERVICE_PORT}
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - REDIS_URL=redis://redis:6379
    ports:
      - "${AI_SERVICE_PORT}:${AI_SERVICE_PORT}"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./2_SERVICES/ai-agent:/app
    networks:
      - iworkz-network
    restart: unless-stopped

  # Matching Engine
  matching-engine:
    build: ./2_SERVICES/matching-engine
    container_name: iworkz-matching
    environment:
      - NODE_ENV=${NODE_ENV}
      - MATCHING_PORT=${MATCHING_PORT}
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - REDIS_URL=redis://redis:6379
      - AI_SERVICE_URL=http://ai-agent:${AI_SERVICE_PORT}
    ports:
      - "${MATCHING_PORT}:${MATCHING_PORT}"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      ai-agent:
        condition: service_started
    volumes:
      - ./2_SERVICES/matching-engine:/app
      - /app/node_modules
    networks:
      - iworkz-network
    restart: unless-stopped

  # Compliance Engine
  compliance-engine:
    build: ./2_SERVICES/compliance-engine
    container_name: iworkz-compliance
    environment:
      - COMPLIANCE_PORT=${COMPLIANCE_PORT}
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - AI_SERVICE_URL=http://ai-agent:${AI_SERVICE_PORT}
    ports:
      - "${COMPLIANCE_PORT}:${COMPLIANCE_PORT}"
    depends_on:
      postgres:
        condition: service_healthy
      ai-agent:
        condition: service_started
    volumes:
      - ./2_SERVICES/compliance-engine:/app
    networks:
      - iworkz-network
    restart: unless-stopped

  # Analytics Service
  analytics-service:
    build: ./2_SERVICES/analytics-service
    container_name: iworkz-analytics
    environment:
      - ANALYTICS_PORT=${ANALYTICS_PORT}
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - REDIS_URL=redis://redis:6379
    ports:
      - "${ANALYTICS_PORT}:${ANALYTICS_PORT}"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./2_SERVICES/analytics-service:/app
    networks:
      - iworkz-network
    restart: unless-stopped

  # Integration Hub
  integration-hub:
    build: ./2_SERVICES/integration-hub
    container_name: iworkz-integration
    environment:
      - NODE_ENV=${NODE_ENV}
      - INTEGRATION_PORT=${INTEGRATION_PORT}
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - REDIS_URL=redis://redis:6379
    ports:
      - "${INTEGRATION_PORT}:${INTEGRATION_PORT}"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./2_SERVICES/integration-hub:/app
      - /app/node_modules
    networks:
      - iworkz-network
    restart: unless-stopped

  # Admin Dashboard
  admin-dashboard:
    build: ./2_SERVICES/admin-dashboard
    container_name: iworkz-admin
    environment:
      - NODE_ENV=${NODE_ENV}
      - ADMIN_PORT=${ADMIN_PORT}
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
    ports:
      - "${ADMIN_PORT}:${ADMIN_PORT}"
    depends_on:
      - backend-api
    volumes:
      - ./2_SERVICES/admin-dashboard:/app
      - /app/node_modules
    networks:
      - iworkz-network
    restart: unless-stopped

  # Voice Assistant (Tomoo AI)
  voice-assistant:
    build: ./2_SERVICES/voice-assistant
    container_name: iworkz-tomoo
    environment:
      - VOICE_ASSISTANT_PORT=${VOICE_ASSISTANT_PORT}
      - WHISPER_MODEL_SIZE=base
      - TTS_MODEL=tts_models/en/ljspeech/tacotron2-DDC_ph
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - IWORKZ_API_URL=http://backend-api:${API_PORT}
    ports:
      - "${VOICE_ASSISTANT_PORT}:${VOICE_ASSISTANT_PORT}"
    depends_on:
      postgres:
        condition: service_healthy
      backend-api:
        condition: service_started
    volumes:
      - ./2_SERVICES/voice-assistant:/app
      - voice_models:/app/models
      - voice_audio:/app/audio
    networks:
      - iworkz-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  voice_models:
    driver: local
  voice_audio:
    driver: local

networks:
  iworkz-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16