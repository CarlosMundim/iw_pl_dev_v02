name: Cultural Intelligence Platform CI

on:
  pull_request:
    branches: [main, develop]
    paths:
      - 'database/**'
      - '2_SERVICES/**'
      - 'AUDIT_ACCELERATORS/**'
  push:
    branches: [feature/cultural-matching]

jobs:
  database-test:
    name: Database Migration Test
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        postgres-version: [14, 15]
    
    services:
      postgres:
        image: postgres:${{ matrix.postgres-version }}
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: iworkz_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v3

    - name: Install pgvector extension
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-${{ matrix.postgres-version }}-pgvector
        
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'database/package-lock.json'

    - name: Install dependencies
      run: |
        cd database
        npm ci

    - name: Run database migrations
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/iworkz_test
        IMPORT_DEMO: true
      run: |
        cd database
        npm run migrate
        npm run seed

    - name: Test cultural intelligence queries
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/iworkz_test
      run: |
        cd database
        npm run test:cultural

    - name: Performance benchmark
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/iworkz_test
      run: |
        cd database
        npm run benchmark:cultural

  frontend-security:
    name: Frontend Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: '2_SERVICES/web-frontend/package-lock.json'

    - name: Install dependencies
      run: |
        cd 2_SERVICES/web-frontend
        npm ci

    - name: Run security audit
      run: |
        cd 2_SERVICES/web-frontend
        npm audit --audit-level high

    - name: TypeScript type check
      run: |
        cd 2_SERVICES/web-frontend
        npm run type-check

    - name: ESLint security rules
      run: |
        cd 2_SERVICES/web-frontend
        npm run lint:security

    - name: Build application
      run: |
        cd 2_SERVICES/web-frontend
        npm run build

  docker-security:
    name: Container Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Build Docker image
      run: |
        cd 2_SERVICES/web-frontend
        docker build -t iworkz-frontend:test .

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'iworkz-frontend:test'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  cultural-bias-test:
    name: Cultural Bias Algorithm Test
    runs-on: ubuntu-latest
    needs: database-test
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Python for bias testing
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install bias testing dependencies
      run: |
        pip install pandas numpy scikit-learn fairlearn

    - name: Run cultural bias analysis
      run: |
        python database/scripts/bias_test.py
        
    - name: Generate bias report
      run: |
        python database/scripts/generate_bias_report.py

    - name: Upload bias test results
      uses: actions/upload-artifact@v3
      with:
        name: cultural-bias-report
        path: database/reports/bias_analysis.json